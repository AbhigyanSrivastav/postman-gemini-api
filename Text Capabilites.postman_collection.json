{
	"info": {
		"_postman_id": "8bf778a5-07fe-4e9c-b706-2cfa6a77cc8f",
		"name": "Text Capabilites",
		"description": "Gemini API lets you generate text, analyze images, and build interactive AI experiences. This collection provides ready-to-use requests for different use cases:\n\n1. **Text-From-Text** – Generate responses based on a given prompt. Useful for writing, summarization, or answering questions.\n    \n2. **Multimodal-Text-Generation** – Combine text and images to get a response. Ask about a picture, and the AI will describe it.\n    \n3. **Interactive-Chat** – Engage in a conversation with the AI. Send a message and get a response.\n    \n4. **Interactive-Chat-With-Streaming** – Get responses in real-time, making interactions feel more natural.\n    \n5. **System Instruction** – Set rules for how the AI should behave before responding. Define its role, tone, or personality.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42938289"
	},
	"item": [
		{
			"name": "Text-From-Text",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"contents\": [\r\n        {\r\n            \"parts\": [\r\n                {\r\n                    \"text\": \"Write a story about a magic backpack.\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"generation_config\": {\r\n        \"temperature\": 0.8,\r\n        \"top_p\": 0.9,\r\n        \"top_k\": 40\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/models/{{MODEL_NAME}}:{{STREAM_TYPE}}?key={{API_KEY}}\n",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"models",
						"{{MODEL_NAME}}:{{STREAM_TYPE}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{API_KEY}}\n"
						}
					]
				},
				"description": "### **Text-From-Text Request - Description**\n\nThis API request is used to **generate text-based responses** from the Gemini model by providing an input prompt. The model processes the input and returns a response based on the given parameters.\n\n#### **Parameters:**\n\n- **`contents`** _(required)_ – The main input containing the text prompt.\n    \n- **`generation_config`** _(optional)_ – Fine-tunes the response behavior.\n    \n    - **`temperature`** – Controls randomness (higher = more creative, lower = more predictable).\n        \n    - **`top_p`** – Adjusts response diversity (lower = more focused, higher = more open-ended).\n        \n    - **`top_k`** – Limits the number of next-word choices for a more controlled response."
			},
			"response": []
		},
		{
			"name": "Multimodal-Text-Generation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"contents\": [\r\n    {\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"Tell me about this instrument\"\r\n        },\r\n        {\r\n          \"inline_data\": {\r\n            \"mime_type\": \"image/jpeg\",\r\n            \"data\": \"{{YOUR-BASE64-ENCODED-IMAGE-HERE}}\"  \r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"generation_config\": {\r\n    \"temperature\": 0.8,\r\n    \"top_p\": 0.9,\r\n    \"top_k\": 40\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/models/{{MODEL_NAME}}:{{STREAM_TYPE}}?key={{API_KEY}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"models",
						"{{MODEL_NAME}}:{{STREAM_TYPE}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{API_KEY}}"
						}
					]
				},
				"description": "### Multimodal-Text-Generation **- Description**\n\nThis API request allows the Gemini model to process both **text and image inputs** to generate a response. The model analyzes the provided image and text together to produce relevant output.\n\n#### **Parameters:**\n\n- **`contents`** _(required)_ – Contains both text and image data for processing.\n    \n- **`generation_config`** _(optional)_ – Adjusts response behavior:\n    \n    - **`temperature`** – Controls randomness (higher = more creative, lower = more predictable).\n        \n    - **`top_p`** – Adjusts response diversity (lower = more focused, higher = more open-ended).\n        \n    - **`top_k`** – Limits next-word choices for more controlled output."
			},
			"response": []
		},
		{
			"name": "Interactive-Chat",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"contents\": [\r\n    {\r\n      \"role\": \"user\",\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"Hello\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"role\": \"model\",\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"Great to meet you. What would you like to know?\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"role\": \"user\",\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"I have two dogs in my house. How many paws are in my house?\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"generation_config\": {\r\n    \"temperature\": 0.7,\r\n    \"top_p\": 0.9,\r\n    \"top_k\": 40\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/models/{{MODEL_NAME}}:{{STREAM_TYPE}}?key={{API_KEY}}\n",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"models",
						"{{MODEL_NAME}}:{{STREAM_TYPE}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{API_KEY}}\n"
						}
					]
				},
				"description": "### **Interactive Chat - Description**\n\nThis API request enables a **conversational interaction** with the Gemini model, allowing back-and-forth exchanges between the user and the AI. The model processes user messages and generates contextual responses based on the conversation history.\n\n#### **Parameters:**\n\n- **`contents`** _(required)_ – A list of messages exchanged between the user (`role: user`) and the AI (`role: model`).\n    \n- **`generation_config`** _(optional)_ – Adjusts response behavior:\n    \n    - **`temperature`** – Controls randomness (higher = more creative, lower = more predictable).\n        \n    - **`top_p`** – Adjusts response diversity (lower = more focused, higher = more open-ended).\n        \n    - **`top_k`** – Limits next-word choices for more controlled output."
			},
			"response": []
		},
		{
			"name": "Interactive-Chat-With-Streaming",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"contents\": [\r\n    {\r\n      \"role\": \"user\",\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"Hello\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"role\": \"model\",\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"Great to meet you. What would you like to know?\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"role\": \"user\",\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"I have two dogs in my house. How many paws are in my house?\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"generation_config\": {\r\n    \"temperature\": 0.7,\r\n    \"top_p\": 0.9,\r\n    \"top_k\": 40\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/models/{{MODEL_NAME}}:{{STREAM_TYPE}}?key={{API_KEY}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"models",
						"{{MODEL_NAME}}:{{STREAM_TYPE}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{API_KEY}}"
						}
					]
				},
				"description": "### **Interactive Chat with Streaming - Description**\n\nThis API request enables **real-time conversational interaction** with the Gemini model by **streaming responses** instead of waiting for the full reply. The AI processes the conversation history and starts returning partial responses as they are generated.\n\n#### **Key Difference:**\n\n- Uses **`streamGenerateContent`** as the `STREAM_TYPE`, instead of `generateContent`.\n    \n- The response is **sent in chunks**, making interactions feel more **real-time and dynamic**.\n    \n\n#### **Parameters:**\n\n- **`contents`** _(required)_ – A list of messages exchanged between the user (`role: user`) and the AI (`role: model`).\n    \n- **`generation_config`** _(optional)_ – Adjusts response behavior:\n    \n    - **`temperature`** – Controls randomness (higher = more creative, lower = more predictable).\n        \n    - **`top_p`** – Adjusts response diversity (lower = more focused, higher = more open-ended).\n        \n    - **`top_k`** – Limits next-word choices for more controlled output."
			},
			"response": []
		},
		{
			"name": "System-Instruction",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"system_instruction\": {\r\n    \"parts\": [\r\n      {\r\n        \"text\": \"You are a cat. Your name is Neko.\"\r\n      }\r\n    ]\r\n  },\r\n  \"contents\": [\r\n    {\r\n      \"parts\": [\r\n        {\r\n          \"text\": \"Hello there\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"generation_config\": {\r\n    \"temperature\": 0.7,\r\n    \"top_p\": 0.9,\r\n    \"top_k\": 40\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/models/{{MODEL_NAME}}:{{STREAM_TYPE}}?key={{API_KEY}}\n",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"models",
						"{{MODEL_NAME}}:{{STREAM_TYPE}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{API_KEY}}\n"
						}
					]
				},
				"description": "### **System Instruction - Description**\n\nThis API request **sets predefined behavior** for the Gemini model before processing user inputs. The `system_instruction` defines rules or roles that the AI should follow throughout the conversation.\n\n#### **Parameters:**\n\n- **`system_instruction`** _(optional but recommended)_ – Establishes **context or personality** for the AI.\n    \n- **`contents`** _(required)_ – User input that the AI responds to while following the system instruction.\n    \n- **`generation_config`** _(optional)_ – Adjusts response behavior:\n    \n    - **`temperature`** – Controls randomness (higher = more creative, lower = more predictable).\n        \n    - **`top_p`** – Adjusts response diversity (lower = more focused, higher = more open-ended).\n        \n    - **`top_k`** – Limits next-word choices for more controlled output."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "YOUR-BASE64-ENCODED-IMAGE-HERE",
			"value": "",
			"type": "string"
		}
	]
}